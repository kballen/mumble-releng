#!/usr/bin/env mumble-build
# Copyright 2013-2015 The 'mumble-releng' Authors. All rights reserved.
# Use of this source code is governed by a BSD-style license that
# can be found in the LICENSE file in the source tree or at
# <http://mumble.info/mumble-releng/LICENSE>.

urls=(
	"http://download.zeroc.com/Ice/3.5/Ice-3.5.1.tar.gz"
)

digests=(
	"sha1:63599ea22a1e9638a49356682c9e516b7c2c454f"
	"sha256:989e51194c6adadbd156da3288e37bad847b93b3b876502e83033b70493af392"
)

function extract {
	tar -zxf Ice-3.5.1.tar.gz
	cd Ice-3.5.1/cpp
}

function prepare {
	patch -p2 < ${MUMBLE_BUILDENV_ROOT}/patches/Ice-3.5.1-static.patch

	## Do some configure-like testing to fix some build errors with older GCCs
	TST=`mktemp -p .` || exit 1

	# Test if #pragma GCC diagnostic is unsupported
	cat > ${TST}.c << EOF
#pragma GCC diagnostic warning "-Wdeprecated-declarations"
int main() {}
EOF
	if gcc -c -Wunknown-pragmas -Werror ${TST}.c; then
		:
	else
		sed -e '/^\s*CXXFLAGS\s*=/ s/\s-Werror\s/ -Werror -Wno-unknown-pragmas -Wno-deprecated-declarations /' -i config/Make.rules.Linux
	fi

	# Test if -pthread implies -lrt, needed for clock_gettime
	cat > ${TST}.c << EOF
void clock_gettime();
int main() { clock_gettime(); }
EOF
	if gcc -pthread -o ${TST} ${TST}.c; then
		:
	else
		sed -e '/^BASELIBS\s*=/ s/$/ -lrt/' -i config/Make.rules.Linux
	fi

	# Test if g++ -Wall includes -Wnon-virtual-dtor
	cat > ${TST}.c << EOF
int main() {
 class a
 {
 public:
  ~a();
  virtual void b();
 };
}
EOF
	if g++ -c -Wall -Werror ${TST}.c; then
		:
	else
		sed -e '/^\s*CXXFLAGS\s*=/ s/\s-Werror\s/ -Werror -Wno-non-virtual-dtor /' -i config/Make.rules.Linux
	fi

	rm -f ${TST}.c ${TST}.o ${TST}
}

function build {
	# embedded_runpath_prefix automatically appends '/lib' to the end of itself.
	# that means that $ICE_PREFIX shouldn't be $ICE_PREFIX/lib to be correct.
	make prefix="${MUMBLE_ICE_PREFIX}" embedded_runpath_prefix="${MUMBLE_PREFIX}/lib:${MUMBLE_ICE_PREFIX}" OPTIMIZE=yes DB_HOME="${MUMBLE_PREFIX}" MCPP_HOME="${MUMBLE_PREFIX}" BZIP2_HOME="${MUMBLE_PREFIX}" EXPAT_HOME="${MUMBLE_PREFIX}" OPENSSL_HOME="${MUMBLE_PREFIX}" STATICLIBS=yes -j4
}

function install {
    make prefix="${MUMBLE_ICE_PREFIX}" embedded_runpath_prefix="${MUMBLE_PREFIX}/lib:${MUMBLE_ICE_PREFIX}" OPTIMIZE=yes DB_HOME="${MUMBLE_PREFIX}" MCPP_HOME="${MUMBLE_PREFIX}" BZIP2_HOME="${MUMBLE_PREFIX}" EXPAT_HOME="${MUMBLE_PREFIX}" OPENSSL_HOME="${MUMBLE_PREFIX}" STATICLIBS=yes install
}
